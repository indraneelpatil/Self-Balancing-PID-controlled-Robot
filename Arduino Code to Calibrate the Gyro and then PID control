
#include <I2Cdev.h>

// Arduino sketch that returns calibration offsets for MPU6050 //   Version 1.1  (31th January 2014)
// Done by Luis RÃ³denas <luisrodenaslorda@gmail.com>
// Based on the I2Cdev library and previous work by Jeff Rowberg <jeff@rowberg.net>
// Updates (of the library) should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib

// These offsets were meant to calibrate MPU6050's internal DMP, but can be also useful for reading sensors. 
// The effect of temperature has not been taken into account so I can't promise that it will work if you 
// calibrate indoors and then use it outdoors. Best is to calibrate and use at the same room temperature.



// I2Cdev and MPU6050 must be installed as libraries
#include "I2Cdev.h"
//#include "MPU6050.h"
#include "Wire.h"
//#include <helper_3dmath.h>
//#include <MPU6050.h>
#include <MPU6050_6Axis_MotionApps20.h>


#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

///////////////////////////////////   CONFIGURATION   /////////////////////////////
//Change this 3 variables if you want to fine tune the skecth to your needs.
int buffersize= 1000;     //Amount of readings used to average, make it higher to get more precision but sketch will be slower  (default:1000)
int acel_deadzone=8;     //Acelerometer error allowed, make it lower to get more precision, but sketch may not converge  (default:8)
int giro_deadzone=10;     //Giro error allowed, make it lower to get more precision, but sketch may not converge  (default:1)
int p=0;
int w=0;


MPU6050 mpu;                                                     // declare mpu as an object of class MPU6050
//MPU6050 accelgyro(0x68); // <-- use for AD0 high


#define OUTPUT_READABLE_YAWPITCHROLL                           // We are only concerned with YAW Pitch and Roll



int16_t ax, ay, az,gx, gy, gz;

int i=0;

int mean_ax,mean_ay,mean_az,mean_gx,mean_gy,mean_gz,state=0;
int ax_offset,ay_offset,az_offset,gx_offset,gy_offset,gz_offset;

bool blinkState = false;

//DMP6

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector



volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}


float Error = 0;
float ErrorP = 0;    //previous error
float PWMOutput = 0;
float integral = 0;
float derivative = 0;

const int motorRightPin = 11;
const int motorLeftPin = 10;
const int motorSpeedPin = 9;

float desiredAngle = 0.00;
float actualAngle;


float Kp = 3; //3                               // PID constants need tuning
float Ki = 0.5; //0.5
float Kd = 1.8; //1.8


int v=0;
float Angle_previous=0;
int k=0;


boolean condition= false;





///////////////////////////////////   SETUP   ////////////////////////////////////
void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
  Wire.begin();
  // COMMENT NEXT LINE IF YOU ARE USING ARDUINO DUE
  TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz). Leonardo measured 250kHz.

  // initialize serial communication
  Serial.begin(115200);

  // initialize device
  mpu.initialize();                                              // only mpu is initialised not dmp

 


  // wait for ready
  while (Serial.available() && Serial.read()); // empty buffer
  while (!Serial.available()){
    Serial.println(F("Send any character to start sketch.\n"));
    delay(1500);
  }                
  while (Serial.available() && Serial.read()); // empty buffer again

  // start message
  Serial.println("\nMPU6050 Calibration Sketch");
  delay(2000);
  Serial.println("\nYour MPU6050 should be placed in horizontal position, with package letters facing up. \nDon't touch it until you see a finish message.\n");
  delay(3000);
  // verify connection
  Serial.println(mpu.testConnection() ? "MPU6050 connection successful" : "MPU6050 connection failed");
  delay(1000);
  // reset offsets
  mpu.setXAccelOffset(0);
  mpu.setYAccelOffset(0);
  mpu.setZAccelOffset(0);
  mpu.setXGyroOffset(0);
  mpu.setYGyroOffset(0);
  mpu.setZGyroOffset(0);

 

pinMode(motorLeftPin, OUTPUT);
  pinMode(motorRightPin, OUTPUT);
  pinMode(motorSpeedPin, OUTPUT);

  
}

///////////////////////////////////   LOOP   ////////////////////////////////////
void loop() {                                                                  // CALIBRATION SKETCH
  if (state==0){
    Serial.println("\nReading sensors for first time...");
    meansensors();
    state++;
    delay(1000);
  }

  if (state==1) {
    Serial.println("\nCalculating offsets...");
    calibration();
    state++;
    delay(1000);
  }

  if (state==2) {
    meansensors();
    
 mpu.setXGyroOffset(gx_offset);
    mpu.setYGyroOffset(gy_offset);
    mpu.setZGyroOffset(gz_offset);
    mpu.setZAccelOffset(ax_offset); 
    mpu.setYAccelOffset(ay_offset);
    mpu.setXAccelOffset(az_offset);
   Serial.println("Offsets are set:");
    //while (1);
  }
                                            
                                                                    // READING YAW ANGLES SKETCH
// load and configure the DMP
    Serial.println(("Initializing DMP..."));
  devStatus = mpu.dmpInitialize();                                 // ONLY INITIALISE DMP AFTER CALIBRATION

 // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
        attachInterrupt(0, dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
      packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }


Serial.println("Trying to find the Desired Angle waiting for stablisation");

while(p==0)                                                           // INFINITE LOOP FOR READING YAW AND PID CONTROL

{

 if (!dmpReady) return;

 while (!mpuInterrupt && fifoCount < packetSize) {
       
    }
 
 
// reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) 
        {
          //Serial.println("1");
          fifoCount = mpu.getFIFOCount();
        }

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;

 #ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
           // Serial.print("ypr\t");
        
           //Serial.println(ypr[0] * 180/M_PI);                    // YAW
            
            //Serial.print("\t");
            //Serial.print(ypr[1] * 180/M_PI);                     // PITCH
            //Serial.print("\t");
           // Serial.println(ypr[2] * 180/M_PI);                   //ROLL
        #endif

   
     if(v==5)                                          // WAIT FOR ATLEAST 5 EQUAL YAW ANGLE READING TO SET DESIRED ANGLE
      {
        k++;
        if(k==1)                                       // SET DESIRED ANGLE ONLY ONCE
        {
        
        Serial.println(" The Desired Angle is found");
        desiredAngle=(ypr[0] * 180/M_PI);
        }
        goto A;
      }
     
    // Serial.println(Angle_previous);
     
     if( (ypr[0] * 180/M_PI) == Angle_previous)                 // CHECK FOR 5 CONSECUTIVE AND EQUAL YAW READINGS
      {
      v++;
      Angle_previous=(ypr[0] * 180/M_PI);
      Serial.println("*");
      goto B;
      }
      else
      {
      v=0;
      Angle_previous=(ypr[0] * 180/M_PI);
      goto B;
      }
 
 Angle_previous=(ypr[0] * 180/M_PI);

  A:    

  actualAngle=(ypr[0] * 180/M_PI);                          
  Error= desiredAngle-actualAngle;
  
  integral=integral+Error;
  derivative=Error-ErrorP;
  ErrorP=Error;
  
  //Serial.println(Error);

  PWMOutput = (Kp * Error) + (Ki * integral) + (Kd * derivative);                   // PID EQUATION

  PWMOutput = 4*abs(PWMOutput);                                                   // MULTIPLIED BY 4 AS MOTOR MOVES ONLY AFTER PWM IS 60

  Serial.println(PWMOutput);
  
   if (PWMOutput > 255)         //make sure PWMOutput stays within its range
  {
    PWMOutput = 255;
  }
  else if (PWMOutput < 0)
  {
    PWMOutput = 0;
  }

      if (Error > 0.00) {         //decide whether motor shoud go right, left or stop
    MoveRight();
  }
  else if (Error < 0.00) {
    MoveLeft();
  }
  if (Error == 0.00) {
    DontMove();
  }

  
   
    
  B:   int a=0;         // JUST RANDOM FOR LABELLING 
    
    }
}

  //delay(1000);
  //Serial.println("loop exit");

Serial.println("loop exit");
}



///////////////////////////////////   FUNCTIONS   ////////////////////////////////////

// CALIBRATION FUNCTIONS

void meansensors()
{
  long i=0,buff_ax=0,buff_ay=0,buff_az=0,buff_gx=0,buff_gy=0,buff_gz=0;

  while (i<(buffersize+101)){
    // read raw accel/gyro measurements from device
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    
    if (i>100 && i<=(buffersize+100)){ //First 100 measures are discarded
      buff_ax=buff_ax+ax;
      buff_ay=buff_ay+ay;
      buff_az=buff_az+az;
      buff_gx=buff_gx+gx;
      buff_gy=buff_gy+gy;
      buff_gz=buff_gz+gz;
    }
    if (i==(buffersize+100)){
      mean_ax=buff_ax/buffersize;
      mean_ay=buff_ay/buffersize;
      mean_az=buff_az/buffersize;
      mean_gx=buff_gx/buffersize;
      mean_gy=buff_gy/buffersize;
      mean_gz=buff_gz/buffersize;
    }
    i++;
    delay(2); //Needed so we don't get repeated measures
  }
}


void calibration(){
  ax_offset=-mean_ax/8;
  ay_offset=-mean_ay/8;
  az_offset=(16384-mean_az)/8;

  gx_offset=-mean_gx/4;
  gy_offset=-mean_gy/4;
  gz_offset=-mean_gz/4;
  while (1){
    int ready=0;
    mpu.setXAccelOffset(ax_offset);
    mpu.setYAccelOffset(ay_offset);
    mpu.setZAccelOffset(az_offset);

    mpu.setXGyroOffset(gx_offset);
    mpu.setYGyroOffset(gy_offset);
    mpu.setZGyroOffset(gz_offset);

    meansensors();
    Serial.println("...");
    i++;
    Serial.println(i);

    if (abs(mean_ax)<=acel_deadzone) ready++;
   
    else ax_offset=ax_offset-mean_ax/acel_deadzone;

    if (abs(mean_ay)<=acel_deadzone) ready++;
    
    else ay_offset=ay_offset-mean_ay/acel_deadzone;

    if (abs(16384-mean_az)<=acel_deadzone) ready++;
    else az_offset=az_offset+(16384-mean_az)/acel_deadzone;

    if (abs(mean_gx)<=giro_deadzone) ready++;
    else gx_offset=gx_offset-mean_gx/(giro_deadzone+1);

    if (abs(mean_gy)<=giro_deadzone) ready++;
    else gy_offset=gy_offset-mean_gy/(giro_deadzone+1);

    if (abs(mean_gz)<=giro_deadzone) ready++;
    else gz_offset=gz_offset-mean_gz/(giro_deadzone+1);

    if (ready==6) break;
  }
}

//Motor functions

void MoveLeft (void) {
  digitalWrite(motorLeftPin, HIGH);
  digitalWrite(motorRightPin, LOW);
  analogWrite(motorSpeedPin, PWMOutput);
  delay(1);
}

void MoveRight (void) {
  digitalWrite(motorLeftPin, LOW);
  digitalWrite(motorRightPin, HIGH);
  analogWrite(motorSpeedPin, PWMOutput);
  delay(1);
}
void DontMove (void) {
  digitalWrite(motorLeftPin, LOW);
  digitalWrite(motorRightPin, LOW);
  analogWrite(motorSpeedPin, 0);
  delay(1);
}
